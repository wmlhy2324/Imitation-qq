syntax = "v1"

info (
	title:   "type title here"
	desc:    "type desc here"
	author:  "type author here"
	email:   "type email here"
	version: "type version here"
)

type groupCreateRequest {
	UserID     uint   `header:"User-ID"`
	Mode       int8   `json:"mode,optional"` //1直接创建 2选人创建
	Name       string `json:"name,optional"`
	IsSearch   bool   `json:"isSearch,optional"` //是否可以搜到
	Size       int    `json:"size,optional"` //群规模
	UserIDList []uint `json:"userIdList,optional"` //用户id列表
}

type groupCreateResponse {}

type groupInfoRequest {
	UserID uint `header:"User-ID"`
	ID     uint `path:"id"`
}

type UserInfo {
	UserID   uint   `header:"User-ID"`
	Avatar   string `json:"avatar"`
	Nickname string `json:"nickname"`
}

type groupInfoResponse {
	GroupID           uint       `json:"groupId"`
	Title             string     `json:"title"`
	Abstract          string     `json:"abstract"`
	MemberCount       int        `json:"memberCount"`
	MemberOnlineCount int        `json:"memberOnlineCount"`
	Avatar            string     `json:"avatar"`
	Creator           UserInfo   `json:"creator"` //群主
	AdminList         []UserInfo `json:"adminList"` //管理员列表
	Role              int8       `json:"role"` //1群主，2群管理员，3群成员
}

type VerificationQuestion {
	Problem1 *string `json:"problem1,optional" conf:"problem1"`
	Problem2 *string `json:"problem2,optional" conf:"problem2"`
	Problem3 *string `json:"problem3,optional" conf:"problem3"`
	Answer1  *string `json:"answer1,optional" conf:"answer1"`
	Answer2  *string `json:"answer2,optional" conf:"answer2"`
	Answer3  *string `json:"answer3,optional" conf:"answer3"`
}

type groupUpdataRequest {
	UserID               uint                  `header:"User-ID"`
	ID                   uint                  `json:"id"`
	IsSearch             *bool                 `json:"isSearch,optional" conf:"is_search"`
	Verification         *int8                 `json:"verification,optional" conf:"verification"`
	IsInvite             *bool                 `json:"isInvite,optional" conf:"is_invite"`
	IsTemporarySession   *bool                 `json:"isTemporarySession,optional" conf:"is_temporary_session"` //是否开启临时会话
	IsProhibition        *bool                 `json:"isProhibition,optional" conf:"is_prohibition"`
	VerificationQuestion *VerificationQuestion `json:"verificationQuestion,optional" conf:"verification_question"`
	Avatar               *string               `json:"avatar,optional" conf:"avatar"`
	Abstract             *string               `json:"abstrat,optional" conf:"abstract"`
	Title                *string               `json:"title,optional" conf:"title"`
}

type groupUpdateResponse {}

type groupRemoveRequest {
	UserID uint `header:"User-ID"`
	ID     uint `path:"id"`
}

type groupRemoveResponse {}

service group {
	@handler groupCreate
	post /api/group/group (groupCreateRequest) returns (groupCreateResponse)

	@handler groupInfo
	get /api/group/group/:id (groupInfoRequest) returns (groupInfoResponse)

	@handler groupUpdate
	put /api/group/group (groupUpdataRequest) returns (groupUpdateResponse)

	@handler groupRemove
	delete /api/group/group/:id (groupRemoveRequest) returns (groupRemoveResponse) //群解散
} //goctl api go -api group_api.api -dir . --home ../../template

